{"version":3,"sources":["../node_modules/bs58check/index.js","../node_modules/bs58/index.js","../node_modules/bs58check/base.js","../node_modules/bnc-onboard/node_modules/safe-buffer/index.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-51018814.js","../node_modules/bnc-onboard/node_modules/hdkey/lib/hdkey.js","../node_modules/bnc-onboard/node_modules/secp256k1/elliptic.js","../node_modules/bnc-onboard/node_modules/secp256k1/lib/index.js","../node_modules/bnc-onboard/node_modules/secp256k1/lib/elliptic.js"],"names":["createHash","require","bs58checkBase","module","exports","buffer","tmp","update","digest","basex","base58","Buffer","checksumFn","decodeRaw","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","copyProps","src","dst","key","SafeBuffer","arg","encodingOrOffset","from","alloc","allocUnsafe","allocUnsafeSlow","TypeError","size","fill","encoding","buf","undefined","SlowBuffer","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","publicKey","chainCode","path","hdk","HDKey","addresses","i","dkey","deriveChild","address","toString","push","dPath","isValidPath","parts","split","includes","accountFieldNumber","Number","isNaN","changeFieldNumber","addressFieldNumber","assert","crypto","bs58check","secp256k1","MASTER_SECRET","BITCOIN_VERSIONS","private","public","versions","this","depth","index","_privateKey","_publicKey","_fingerprint","parentFingerprint","serialize","hdkey","version","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","readUInt32BE","publicKeyVerify","publicKeyConvert","privateKey","derive","entries","forEach","c","hardened","childIndex","parseInt","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj","HARDENED_OFFSET","errors","cond","msg","isUint8Array","name","Array","isArray","numbers","join","isCompressed","toTypeString","getAssertedOutput","output","len","call","contextRandomize","seed","seckey","privateKeyNegate","tweak","privateKeyTweakMul","pubkey","compressed","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakMul","signatureNormalize","sig","signatureExport","outputlen","signatureImport","msg32","options","noncefn","recid","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","BN","n","constructor","loadPublicKey","first","x","cmp","p","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","subarray","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","toArrayLike","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pair","pairs","add","isInfinity","g","mul","r","s","nh","sigR","sigS","lenR","posR","lenS","posS","message","_noncefn","counter","nonce","d","canonical","k","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","sha256","getX","toArray","getY"],"mappings":"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","file":"static/js/6.f5b43937.chunk.js","sourcesContent":["'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","import * as ethUtil from 'ethereumjs-util';\nimport HDKey from 'hdkey';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (![\"60'\", \"1'\", \"73799'\", \"246'\"].includes(parts[2])) {\n    return false;\n  }\n\n  if (parts[3] === undefined || parts[3] === \"0'\") {\n    return true;\n  }\n\n  var accountFieldNumber = Number(parts[3].slice(0, -1));\n\n  if (isNaN(accountFieldNumber) || accountFieldNumber < 0 || parts[3].slice(-1) !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldNumber = Number(parts[4]);\n\n  if (isNaN(changeFieldNumber) || changeFieldNumber < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldNumber = Number(parts[5]);\n\n  if (isNaN(addressFieldNumber) || addressFieldNumber < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n"],"sourceRoot":""}