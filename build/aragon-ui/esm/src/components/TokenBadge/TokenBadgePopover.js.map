{"version":3,"file":"TokenBadgePopover.js","sources":["../../../../../src/components/TokenBadge/TokenBadgePopover.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from '../../proptypes'\nimport { ImageExists } from '../../hooks'\nimport { GU } from '../../style'\nimport { blockExplorerUrl } from '../../utils'\nimport AddressField from '../AddressField/AddressField'\nimport BadgePopoverBase from '../BadgeBase/BadgePopoverBase'\nimport Link from '../Link/Link'\n\nconst TokenBadgePopover = React.memo(function TokenBadgePopover({\n  address,\n  iconSrc,\n  networkType,\n  onClose,\n  opener,\n  title,\n  visible,\n}) {\n  const etherscanUrl = blockExplorerUrl('token', address, { networkType })\n\n  return (\n    <BadgePopoverBase\n      addressField={\n        iconSrc ? (\n          <ImageExists src={iconSrc}>\n            {({ exists }) => (\n              <AddressField\n                address={address}\n                icon={exists ? <Icon src={iconSrc} /> : null}\n              />\n            )}\n          </ImageExists>\n        ) : (\n          <AddressField address={address} />\n        )\n      }\n      link={etherscanUrl && <Link href={etherscanUrl}>See on Explorer</Link>}\n      onClose={onClose}\n      opener={opener}\n      title={title}\n      visible={visible}\n    />\n  )\n})\n\nTokenBadgePopover.propTypes = {\n  address: PropTypes.string.isRequired,\n  iconSrc: PropTypes.string,\n  networkType: PropTypes.string,\n  onClose: PropTypes.func,\n  opener: PropTypes._element,\n  title: PropTypes.string.isRequired,\n  visible: PropTypes.bool,\n}\n\nfunction Icon({ src }) {\n  return (\n    <div\n      css={`\n        width: calc(100% - ${0.5 * GU}px);\n        height: calc(100% - ${0.5 * GU}px);\n        background-size: contain;\n        background-position: 50% 50%;\n        background-repeat: no-repeat;\n        background-image: url(${src});\n      `}\n    />\n  )\n}\n\nIcon.propTypes = {\n  src: PropTypes.string.isRequired,\n}\n\nexport default TokenBadgePopover\n"],"names":["TokenBadgePopover","React","memo","address","iconSrc","networkType","onClose","opener","title","visible","etherscanUrl","blockExplorerUrl","exists","propTypes","PropTypes","string","isRequired","func","_element","bool","Icon","src","GU"],"mappings":";;;;;;;;;;IASMA,iBAAiB,gBAAGC,KAAK,CAACC,IAAN,CAAW,SAASF,iBAAT,OAQlC;AAAA,MAPDG,OAOC,QAPDA,OAOC;AAAA,MANDC,OAMC,QANDA,OAMC;AAAA,MALDC,WAKC,QALDA,WAKC;AAAA,MAJDC,OAIC,QAJDA,OAIC;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,MAFDC,KAEC,QAFDA,KAEC;AAAA,MADDC,OACC,QADDA,OACC;AACD,MAAMC,YAAY,GAAGC,gBAAgB,CAAC,OAAD,EAAUR,OAAV,EAAmB;AAAEE,IAAAA,WAAW,EAAXA;AAAF,GAAnB,CAArC;AAEA,sBACE,oBAAC,gBAAD;AACE,IAAA,YAAY,EACVD,OAAO,gBACL,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEA;AAAlB,OACG;AAAA,UAAGQ,MAAH,SAAGA,MAAH;AAAA,0BACC,oBAAC,YAAD;AACE,QAAA,OAAO,EAAET,OADX;AAEE,QAAA,IAAI,EAAES,MAAM,gBAAG,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAER;AAAX,UAAH,GAA4B;AAF1C,QADD;AAAA,KADH,CADK,gBAUL,oBAAC,YAAD;AAAc,MAAA,OAAO,EAAED;AAAvB,MAZN;AAeE,IAAA,IAAI,EAAEO,YAAY,iBAAI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEA;AAAZ,yBAfxB;AAgBE,IAAA,OAAO,EAAEJ,OAhBX;AAiBE,IAAA,MAAM,EAAEC,MAjBV;AAkBE,IAAA,KAAK,EAAEC,KAlBT;AAmBE,IAAA,OAAO,EAAEC;AAnBX,IADF;AAuBD,CAlCyB;AAoC1BT,iBAAiB,CAACa,SAAlB,GAA8B;AAC5BV,EAAAA,OAAO,EAAEW,iBAAS,CAACC,MAAV,CAAiBC,UADE;AAE5BZ,EAAAA,OAAO,EAAEU,iBAAS,CAACC,MAFS;AAG5BV,EAAAA,WAAW,EAAES,iBAAS,CAACC,MAHK;AAI5BT,EAAAA,OAAO,EAAEQ,iBAAS,CAACG,IAJS;AAK5BV,EAAAA,MAAM,EAAEO,iBAAS,CAACI,QALU;AAM5BV,EAAAA,KAAK,EAAEM,iBAAS,CAACC,MAAV,CAAiBC,UANI;AAO5BP,EAAAA,OAAO,EAAEK,iBAAS,CAACK;AAPS,CAA9B;;;;;;;;;;;;;AAUA,SAASC,IAAT,QAAuB;AAAA,MAAPC,GAAO,SAAPA,GAAO;AACrB,sBACE;AAAA,UAEyB,MAAMC,EAF/B;AAAA,WAG0B,MAAMA,EAHhC;AAAA,WAO4BD;AAP5B,IADF;AAYD;;AAEDD,IAAI,CAACP,SAAL,GAAiB;AACfQ,EAAAA,GAAG,EAAEP,iBAAS,CAACC,MAAV,CAAiBC;AADP,CAAjB;;;;"}