{"version":3,"file":"useImageExists.js","sources":["../../../../src/hooks/useImageExists.js"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport cachedMap from '../lib/cached-map'\n\nconst srcCache = cachedMap()\n\n// Check if a remote image exists and can be loaded within a specific amount of time.\nexport function useImageExists(src, timeUntilFallback = 50) {\n  const [exists, setExists] = useState(false)\n  const [loading, setLoading] = useState(true)\n  const [displayFallback, setDisplayFallback] = useState(false)\n\n  useEffect(() => {\n    let image = new Image()\n    const fallbackTimer = setTimeout(\n      () => setDisplayFallback(true),\n      timeUntilFallback\n    )\n\n    const init = () => {\n      if (!src) {\n        setExists(false)\n        setLoading(false)\n        return\n      }\n\n      if (srcCache.get(src)) {\n        success()\n        return\n      }\n\n      setExists(false)\n      setLoading(true)\n\n      // TODO: ensure only one image is loading at a time for a given src.\n      image.addEventListener('load', success)\n      image.src = src\n    }\n\n    const success = () => {\n      setLoading(false)\n      setExists(true)\n      srcCache.set(src, true)\n      done()\n    }\n\n    const done = () => {\n      clearTimeout(fallbackTimer)\n      if (image) {\n        image.removeEventListener('load', success)\n        image = null\n      }\n    }\n\n    init()\n\n    return done\n  }, [src, timeUntilFallback])\n\n  return useMemo(() => {\n    return { src, displayFallback, exists, loading }\n  }, [src, displayFallback, exists, loading])\n}\n\n// render prop\nexport const ImageExists = ({ timeUntilFallback, src, children }) =>\n  children(useImageExists(src, timeUntilFallback))\n"],"names":["srcCache","cachedMap","useImageExists","src","timeUntilFallback","useState","exists","setExists","loading","setLoading","displayFallback","setDisplayFallback","useEffect","image","Image","fallbackTimer","setTimeout","init","get","success","addEventListener","set","done","clearTimeout","removeEventListener","useMemo","ImageExists","children"],"mappings":";;;;AAGA,IAAMA,QAAQ,GAAGC,SAAS,EAA1B;;AAGO,SAASC,cAAT,CAAwBC,GAAxB,EAAqD;AAAA,MAAxBC,iBAAwB,uEAAJ,EAAI;;AAAA,kBAC9BC,QAAQ,CAAC,KAAD,CADsB;AAAA;AAAA,MACnDC,MADmD;AAAA,MAC3CC,SAD2C;;AAAA,mBAE5BF,QAAQ,CAAC,IAAD,CAFoB;AAAA;AAAA,MAEnDG,OAFmD;AAAA,MAE1CC,UAF0C;;AAAA,mBAGZJ,QAAQ,CAAC,KAAD,CAHI;AAAA;AAAA,MAGnDK,eAHmD;AAAA,MAGlCC,kBAHkC;;AAK1DC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACA,QAAMC,aAAa,GAAGC,UAAU,CAC9B;AAAA,aAAML,kBAAkB,CAAC,IAAD,CAAxB;AAAA,KAD8B,EAE9BP,iBAF8B,CAAhC;;AAKA,QAAMa,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,UAAI,CAACd,GAAL,EAAU;AACRI,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD;;AAED,UAAIT,QAAQ,CAACkB,GAAT,CAAaf,GAAb,CAAJ,EAAuB;AACrBgB,QAAAA,OAAO;AACP;AACD;;AAEDZ,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV,CAbiB;;AAgBjBI,MAAAA,KAAK,CAACO,gBAAN,CAAuB,MAAvB,EAA+BD,OAA/B;AACAN,MAAAA,KAAK,CAACV,GAAN,GAAYA,GAAZ;AACD,KAlBD;;AAoBA,QAAMgB,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAP,MAAAA,QAAQ,CAACqB,GAAT,CAAalB,GAAb,EAAkB,IAAlB;AACAmB,MAAAA,IAAI;AACL,KALD;;AAOA,QAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjBC,MAAAA,YAAY,CAACR,aAAD,CAAZ;;AACA,UAAIF,KAAJ,EAAW;AACTA,QAAAA,KAAK,CAACW,mBAAN,CAA0B,MAA1B,EAAkCL,OAAlC;AACAN,QAAAA,KAAK,GAAG,IAAR;AACD;AACF,KAND;;AAQAI,IAAAA,IAAI;AAEJ,WAAOK,IAAP;AACD,GA7CQ,EA6CN,CAACnB,GAAD,EAAMC,iBAAN,CA7CM,CAAT;AA+CA,SAAOqB,OAAO,CAAC,YAAM;AACnB,WAAO;AAAEtB,MAAAA,GAAG,EAAHA,GAAF;AAAOO,MAAAA,eAAe,EAAfA,eAAP;AAAwBJ,MAAAA,MAAM,EAANA,MAAxB;AAAgCE,MAAAA,OAAO,EAAPA;AAAhC,KAAP;AACD,GAFa,EAEX,CAACL,GAAD,EAAMO,eAAN,EAAuBJ,MAAvB,EAA+BE,OAA/B,CAFW,CAAd;AAGD;;IAGYkB,WAAW,GAAG,SAAdA,WAAc;AAAA,MAAGtB,iBAAH,QAAGA,iBAAH;AAAA,MAAsBD,GAAtB,QAAsBA,GAAtB;AAAA,MAA2BwB,QAA3B,QAA2BA,QAA3B;AAAA,SACzBA,QAAQ,CAACzB,cAAc,CAACC,GAAD,EAAMC,iBAAN,CAAf,CADiB;AAAA;;;;"}