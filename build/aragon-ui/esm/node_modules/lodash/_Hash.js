import _hashClear from './_hashClear.js';
import _hashDelete from './_hashDelete.js';
import _hashGet from './_hashGet.js';
import _hashHas from './_hashHas.js';
import _hashSet from './_hashSet.js';

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = _hashClear;
Hash.prototype['delete'] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;

var _Hash = Hash;

export default _Hash;
export { _Hash as __moduleExports };
//# sourceMappingURL=_Hash.js.map
