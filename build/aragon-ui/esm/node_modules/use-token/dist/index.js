import React, { useContext, useState, useEffect, useRef, useCallback } from 'react';
import { tokenIconUrl, fetchTokenData } from './utils.js';

const UseTokenContext = React.createContext(null);
function useToken(address = '') {
    const tokenContext = useContext(UseTokenContext);
    const [tokenData, setTokenData] = useState(null);
    if (tokenContext === null) {
        throw new Error('useToken() can only be used inside of <UseTokenProvider />, ' + 'please declare it at a higher level.');
    }
    useEffect(()=>{
        let cancelled = false;
        const update = async ()=>{
            const data = await tokenContext.fetchTokenData(address);
            if (!cancelled) {
                setTokenData(data);
            }
        };
        update();
        return ()=>{
            cancelled = true;
        };
    }, [address]);
    return {
        iconUrl: tokenIconUrl(address),
        symbol: tokenData && tokenData.symbol,
        name: tokenData && tokenData.name
    };
}
function UseTokenProvider({ children  }) {
    const tokens = useRef(new Map());
    const fetchAndCacheTokenData = useCallback(async (address)=>{
        if (tokens.current.has(address)) {
            return tokens.current.get(address);
        }
        try {
            const tokenData = await fetchTokenData(address);
            tokens.current.set(address, tokenData);
            return tokenData;
        } catch (err) {
            console.log('ar', err);
        }
    }, []);
    return React.createElement(UseTokenContext.Provider, {
        value: {
            fetchTokenData: fetchAndCacheTokenData
        }
    }, children);
}

export { UseTokenProvider, useToken };
//# sourceMappingURL=index.js.map
